// Autogenerated by FFIDJI

using System;
using System.Runtime.InteropServices;
using System.Security;
using char16 = System.Char;
using int8 = System.SByte;
using uint8 = System.Byte;
using int16 = System.Int16;
using uint16 = System.UInt16;
using int32 = System.Int32;
using uint32 = System.UInt32;
using int64 = System.Int64;
using uint64 = System.UInt64;
using float16 = System.Half;
using float32 = System.Single;
using float64 = System.Double;

namespace DrDotnet.Interop
{ 
    public static class NativeProfilersInterface
    { 
        public const string LIBRARY_NAME = "profilers";

        private readonly struct Buffer
        { 
            public readonly IntPtr ptr;
            public readonly int size;
            public Buffer(IntPtr ptr, int size)
            { 
                this.ptr = ptr;
                this.size = size;
            } 
        }
        
        [SuppressUnmanagedCodeSecurity]
        [DllImport(LIBRARY_NAME, EntryPoint = "FreeBuffer")]
        private static extern void FreeBuffer_FFI(Buffer buffer);

        [SuppressUnmanagedCodeSecurity]
        [DllImport(LIBRARY_NAME, EntryPoint = "GetAvailableProfilers")]
        private static extern Buffer GetAvailableProfilers_FFI();

        public static unsafe ProfilersInfo GetAvailableProfilers()
        {
            Buffer buffer = GetAvailableProfilers_FFI();
            ReadOnlySpan<byte> bytes = new ReadOnlySpan<byte>(buffer.ptr.ToPointer(), buffer.size);
            ProfilersInfo profilersInfo = ProfilersInfo.Parser.ParseFrom(bytes);
            FreeBuffer_FFI(buffer);
            return profilersInfo;
        } 
    } 
} 
