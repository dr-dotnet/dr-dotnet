@page "/profilers/{ProcessId:int}"

@using Microsoft.Diagnostics.NETCore.Client;
@using System.IO;
@using Microsoft.Extensions.Logging
@using System.Diagnostics

@inject IProfilerDiscovery _profilersDiscovery;
@inject ISessionDiscovery _dessionDiscovery;
@inject NavigationManager _navigationManager;
@inject IJSRuntime _jsRuntime;
@inject ILogger _logger;

<MatIconButton Style="float: left;" Icon="@MatIconNames.Arrow_back" OnClick="@OnBackClick"></MatIconButton>

<MatButton Raised="true" Icon="@MatIconNames.Cloud_download" Label="Take Dump" OnClick="DownloadFileFromStream" Style="float: right;"></MatButton>

<h3 class="mat-h3">Profilers</h3>

@if (_profilers == null)
{
    <h3 class="mat-subtitle1">Listing available profilers...</h3>
}
else
{
    <MatTable Items="@_profilers" class="mat-elevation-z5" AllowSelection="true" SelectionChanged="@OnSelectionChanged" PageSize="Int32.MaxValue" ShowPaging="false">
    <MatTableHeader>
        <th>Name</th>
        <th style="min-width:300px;">Id</th>
        <th>Description</th>
    </MatTableHeader>
    <MatTableRow>
        <td>@context.Name</td>
        <td>@context.ProfilerId</td>
        <td>@context.Description</td>
    </MatTableRow>
    </MatTable>
}

@code {
    private List<Profiler> _profilers;

    [Parameter]
    public int ProcessId { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

         _profilers = _profilersDiscovery.GetProfilers();

        var process = Process.GetProcessById(ProcessId);
        foreach (ProcessModule module in process.Modules)
        {
            _logger.LogInformation(">> Loaded module '{Name}' file '{File}'", module.ModuleName, module.FileName);
        }
    }

    private void OnSelectionChanged(object data)
    {
        _navigationManager.NavigateTo($"/job/{ProcessId}/{(data as Profiler).ProfilerId}", true);
    }

    public void OnBackClick(object data)
    {
        _navigationManager.NavigateTo("/processes", true);
    }
    
    private async Task DownloadFileFromStream()
    {
        var client = new DiagnosticsClient(ProcessId);

        var fileName = $"coredump_{DateTime.UtcNow}.dmp";

        var dumpFilePath = Path.Combine(_dessionDiscovery.RootDir, fileName);
        
        client.WriteDump(DumpType.Normal, dumpFilePath, WriteDumpFlags.None);
        
        Stream fileStream = File.OpenRead(dumpFilePath);
            
        using var streamRef = new DotNetStreamReference(stream: fileStream, leaveOpen: true);

        await _jsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
} 