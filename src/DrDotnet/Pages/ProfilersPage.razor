@page "/profilers/{ProcessId:int}"
@using Markdig

@inject IProfilerDiscovery ProfilersDiscovery;
@inject IProcessDiscovery ProcessDiscovery
@inject NavigationManager NavigationManager;

<NavBar Title="Profilers" ShowBackButton="true" Process="@Process()">
    <MudTable T="ProfilerInfo" Items="@Profilers" class="mat-elevation-z5" AllowSelection="true" OnRowClick="@OnSelectionChanged" PageSize="Int32.MaxValue" ShowPaging="false">
        <HeaderContent>
            <MudTh style="min-width:330px;">Name</MudTh>
            <MudTh>Description</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>@MarkdownStringToMarkup(context.Description)</MudTd>
        </RowTemplate>
    </MudTable>
</NavBar>

@code {
    private IList<ProfilerInfo> Profilers { get; set; } = Array.Empty<ProfilerInfo>();

    [Parameter]
    public required int ProcessId { get; init; }

    private ProcessInfo? Process()
    {
        ProcessDiscovery.TryGetProcessInfoFromPid(ProcessId, out ProcessInfo? process);
        return process;
    }

    private static MarkupString MarkdownStringToMarkup(string str)
    {
        return new MarkupString(Markdown.ToHtml(str, new MarkdownPipelineBuilder().UseAdvancedExtensions().Build()));
    }
    
    protected override void OnInitialized()
    {
        base.OnInitialized();

        Profilers = ProfilersDiscovery.GetProfilers();
    }

    private void OnSelectionChanged(TableRowClickEventArgs<ProfilerInfo> tableRowClickEventArgs)
    {
        NavigationManager.NavigateTo($"/job/{ProcessId}/{tableRowClickEventArgs.Item!.Uuid}", true);
    }

    private void OnBackClick(object data)
    {
        NavigationManager.NavigateTo("/processes", true);
    }
} 