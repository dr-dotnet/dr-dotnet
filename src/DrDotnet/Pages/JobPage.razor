@page "/job/{ProcessId:int}/{ProfilerId:guid}"

@using DrDotnet.Utils;
@using Markdig
@using Microsoft.Extensions.Logging

@inject NavigationManager NavigationManager
@inject IProfilerDiscovery ProfilerDiscovery
@inject IProcessDiscovery ProcessDiscovery
@inject ILogger<JobPage> Logger

<NavBar Title="Profilers" ShowBackButton="true" Process="@Process()" Profiler="@Profiler">
    @* <div class="mat-layout-grid"> *@
    @*     <div class="mat-layout-grid-inner mat-elevation-z5" style="padding: 20px;"> *@
    @*         $1$ <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6"> #1# *@
    @*         $1$     <h4 class="mat-h4">@Profiler.Name</h4> #1# *@
    @*         $1$ </div> #1# *@
    @*         $1$ #1# *@
    @*         $1$ <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6 mat-body1"> #1# *@
    @*         $1$     @Profiler.Uuid #1# *@
    @*         $1$ </div> #1# *@
    @*         $1$ #1# *@
    @*         $1$ <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12 mat-body1"> #1# *@
    @*         $1$     @MarkdownStringToMarkup(Profiler.Description) #1# *@
    @*         $1$ </div> #1# *@
    @*         $1$ #1# *@
    @*         $1$ @if (Profiler.Parameters.Count > 0) #1# *@
    @*         $1$ { #1# *@
    @*         $1$     <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12"> #1# *@
    @*         $1$         <h4 class="mat-h5">Parameters</h4> #1# *@
    @*         $1$     </div> #1# *@
    @*         $1$      #1# *@
    @*         $1$     @foreach (ProfilerParameter parameter in Profiler.Parameters) #1# *@
    @*         $1$     { #1# *@
    @*         $1$         <p> #1# *@
    @*         $1$             <MudTooltip Tooltip="@parameter.Description">            #1# *@
    @*         $1$                 @switch (parameter.Type) #1# *@
    @*         $1$                 { #1# *@
    @*         $1$                     case ParameterType.String: #1# *@
    @*         $1$                         <MudTextField @bind-Value="@parameter.Value" Label="@parameter.Name"></MudTextField>  #1# *@
    @*         $1$                         break; #1# *@
    @*         $1$                     case ParameterType.Int: #1# *@
    @*         $1$                         <MudTextField @bind-Value="@parameter.ValueInt32" Label="@parameter.Name"></MudTextField> #1# *@
    @*         $1$                         break; #1# *@
    @*         $1$                     case ParameterType.Float: #1# *@
    @*         $1$                         <MudTextField @bind-Value="@parameter.ValueFloat32" Label="@parameter.Name"></MudTextField> #1# *@
    @*         $1$                         break; #1# *@
    @*         $1$                     case ParameterType.Boolean: #1# *@
    @*         $1$                         <MudCheckBox @bind-Value="@parameter.ValueBoolean" Label="@parameter.Name"></MudCheckBox> #1# *@
    @*         $1$                         break; #1# *@
    @*         $1$                 }        #1# *@
    @*         $1$             </MudTooltip> #1# *@
    @*         $1$         </p> #1# *@
    @*         $1$     } #1# *@
    @*         $1$ } #1# *@
    @* *@
    @*     </div> *@
    @* </div> *@

    <span class="material-symbols-outlined">
    close
    </span>
        
    <MudPaper>
                @switch (State)
                {
                    case JobState.NotStarted:
                        <MudButton StartIcon="@Icons.Material.Filled.PlayArrow" OnClick="OnRunAnalysisClicked">Attach to process</MudButton>
                        break;
                    case JobState.InProgress:
                        <h3 class="mat-subtitle1">Analysis in progress, please wait...</h3>
                        <MudProgressLinear Indeterminate="true"/>
                        break;
                    case JobState.Completed:
                        <MudButton StartIcon="@Icons.Material.Filled.PlayArrow" OnClick="OnViewSessionResultsClicked">View session results</MudButton>
                        break;
                    case JobState.Failed:
                        <h3 class="mat-subtitle1">Job failed. Check out logs for more information.</h3>
                        break;
                }
            </MudPaper>
</NavBar>

@code {

    [Parameter]
    public required int ProcessId { get; init; }

    [Parameter]
    public required Guid ProfilerId { get; init; }

    private JobState State { get; set; } = JobState.NotStarted;
    private SessionInfo? Session { get; set; }

    private ProfilerInfo? _profiler;

    // ReSharper disable once ConvertToAutoProperty
    private ProfilerInfo Profiler
    {
        get => _profiler!;
        set => _profiler = value;
    }
    
    private ProcessInfo? Process()
    {
        ProcessDiscovery.TryGetProcessInfoFromPid(ProcessId, out ProcessInfo? process);
        return process;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        Profiler = ProfilerDiscovery.GetProfilers().FirstOrDefault(x => x.Guid == ProfilerId)!;
    }
    
    private static MarkupString MarkdownStringToMarkup(string str)
    {
        return new MarkupString(Markdown.ToHtml(str, new MarkdownPipelineBuilder().UseAdvancedExtensions().Build()));
    }

    private void OnRunAnalysisClicked(object data)
    {
        State = JobState.InProgress;
        StateHasChanged();
        
        // Trigger profiler in another thread than UI thread
        _ = Task.Run(async () =>
        {
            try
            {
                if (!ProcessDiscovery.TryGetProcessInfoFromPid(ProcessId, out ProcessInfo? process))
                {
                    throw new InvalidOperationException("Could not find process with PID {ProcessId}");
                }

                // Todo check profiler and check process
                Logger.LogInformation("Start profiling!");
                Session = ProfilingExtensions.StartProfilingSession(Profiler, process, Logger);
                Logger.LogInformation("Successfully attached to process!");
                
                await Session.AwaitUntilCompletion();

                State = JobState.Completed;
            }
            catch (Exception e)
            {
                State = JobState.Failed;
                Logger.LogError(e, "Could not attach to process {ProcessId}", ProcessId);
            }
            
            await InvokeAsync(StateHasChanged);
        });
    }

    private void OnViewSessionResultsClicked(object data)
    {
        NavigationManager.NavigateTo($"/sessions/{Session!.Guid}", true);
    }

    private void OnBackClick(object data)
    {
        NavigationManager.NavigateTo($"/profilers/{ProcessId}", true);
    }
    
    public enum JobState
    {
        NotStarted,
        InProgress,
        Completed,
        Failed
    }
} 