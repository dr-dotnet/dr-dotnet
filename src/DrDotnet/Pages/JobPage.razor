@page "/job/{ProcessId:int}/{ProfilerId:guid}"

@using DrDotnet.Utils;
@using Microsoft.Extensions.Logging

@inject NavigationManager NavigationManager
@inject IProfilerDiscovery ProfilerDiscovery
@inject IProcessDiscovery ProcessDiscovery
@inject ILogger<JobPage> Logger

<MatIconButton Style="float: left;" Icon="@MatIconNames.Arrow_back" OnClick="@OnBackClick"/>

<h3 class="mat-h3">Job</h3>

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner mat-elevation-z5" style="padding: 20px;">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
            <h4 class="mat-h4">@Profiler.Name</h4>
        </div>
        
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6 mat-body1">
            @Profiler.Uuid
        </div>

        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12 mat-body1">
            @Profiler.Description
        </div>
        
        @if (Profiler.Parameters.Count > 0)
        {
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                <h4 class="mat-h5">Parameters</h4>
            </div>
            
            @foreach (ProfilerParameter parameter in Profiler.Parameters)
            {
                <p>
                    <MatTooltip Tooltip="@parameter.Description">           
                        @switch (parameter.Type)
                        {
                            case ParameterType.String:
                                <MatTextField RefBack="@context" @bind-Value="@parameter.Value" Label="@parameter.Name"></MatTextField> 
                                break;
                            case ParameterType.Int:
                                <MatTextField RefBack="@context" @bind-Value="@parameter.ValueInt32" Label="@parameter.Name"></MatTextField>
                                break;
                            case ParameterType.Float:
                                <MatTextField RefBack="@context" @bind-Value="@parameter.ValueFloat32" Label="@parameter.Name"></MatTextField>
                                break;
                            case ParameterType.Boolean:
                                <MatCheckbox RefBack="@context" @bind-Value="@parameter.ValueBoolean" Label="@parameter.Name"></MatCheckbox>
                                break;
                        }       
                    </MatTooltip>
                </p>
            }
        }

        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
            @switch (State)
            {
                case JobState.NotStarted:
                    <MatButton Raised="true" Icon="@MatIconNames.Play_arrow" Label="Attach to process" OnClick="OnRunAnalysisClicked" Style="float: right;"/>
                    break;
                case JobState.InProgress:
                    <h3 class="mat-subtitle1">Analysis in progress, please wait...</h3>
                    <MatProgressBar Indeterminate="true"/>
                    break;
                case JobState.Completed:
                    <MatButton Raised="true" Icon="@MatIconNames.Play_arrow" Label="View session results" OnClick="OnViewSessionResultsClicked" Style="float: right;"/>
                    break;
                case JobState.Failed:
                    <h3 class="mat-subtitle1">Job failed. Check out logs for more information.</h3>
                    break;
            }
        </div>
    </div>
</div>

@code {

    [Parameter]
    public required int ProcessId { get; init; }

    [Parameter]
    public required Guid ProfilerId { get; init; }

    private JobState State { get; set; } = JobState.NotStarted;
    private SessionInfo? Session { get; set; }

    private ProfilerInfo? _profiler;

    // ReSharper disable once ConvertToAutoProperty
    private ProfilerInfo Profiler
    {
        get => _profiler!;
        set => _profiler = value;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        Profiler = ProfilerDiscovery.GetProfilers().FirstOrDefault(x => x.Guid == ProfilerId)!;
    }

    private void OnRunAnalysisClicked(object data)
    {
        State = JobState.InProgress;
        StateHasChanged();
        
        // Trigger profiler in another thread than UI thread
        _ = Task.Run(async () =>
        {
            try
            {
                ProcessInfo process = ProcessDiscovery.GetProcessInfoFromPid(ProcessId)!;

                // Todo check profiler and check process
                Logger.LogInformation("Start profiling!");
                Session = ProfilingExtensions.StartProfilingSession(Profiler, process, Logger);
                Logger.LogInformation("Successfully attached to process!");
                
                await Session.AwaitUntilCompletion();

                State = JobState.Completed;
            }
            catch (Exception e)
            {
                State = JobState.Failed;
                Logger.LogError(e, "Could not attach to process {ProcessId}", ProcessId);
            }
            
            await InvokeAsync(StateHasChanged);
        });
    }

    private void OnViewSessionResultsClicked(object data)
    {
        NavigationManager.NavigateTo($"/sessions/{Session!.Guid}", true);
    }

    private void OnBackClick(object data)
    {
        NavigationManager.NavigateTo($"/profilers/{ProcessId}", true);
    }
    
    public enum JobState
    {
        NotStarted,
        InProgress,
        Completed,
        Failed
    }
} 