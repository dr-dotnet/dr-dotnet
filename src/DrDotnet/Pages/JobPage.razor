@page "/job/{ProcessId}/{ProfilerId}"
@using DrDotnet.Utils;
@using Microsoft.Extensions.Logging

@inject NavigationManager _navigationManager
@inject IProfilerDiscovery _profilerDiscovery
@inject ISessionDiscovery _sessionDiscovery
@inject ILogger _logger

<MatIconButton Style="float: left;" Icon="@MatIconNames.Arrow_back" OnClick="@OnBackClick"></MatIconButton>

<MatButton Raised="true" Icon="@MatIconNames.Cloud_download" Label="Log Process Modules" OnClick="LogProcessModulesInfo" Style="float: right;"></MatButton>

<MatButton Raised="true" Icon="@MatIconNames.Cloud_download" Label="Load Unload Lib Manually" OnClick="ManualLoadUnload" Style="float: right;"></MatButton>

<h3 class="mat-h3">Job</h3>

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner mat-elevation-z5" style="padding: 20px;">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
            <h4 class="mat-h4">@_profiler.Name</h4>
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6 mat-body1">
            @_profiler.ProfilerId
        </div>

        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12 mat-body1">
            @_profiler.Description
        </div>

        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
            @if (Started)
            {
                <h3 class="mat-subtitle1">Analysis in progress, please wait...</h3>
                <MatProgressBar Indeterminate="true"></MatProgressBar>
            }
            else
            {
                if (Session != null)
                {
                    <MatButton Raised="true" Icon="@MatIconNames.Play_arrow" Label="View session results" OnClick="OnViewSessionResultsClicked" Style="float: right;"></MatButton>
                }
                else
                {
                    <MatButton Raised="true" Icon="@MatIconNames.Play_arrow" Label="Attach to process" OnClick="OnRunAnalysisClicked" Style="float: right;"></MatButton>
                }
            }
        </div>
    </div>
</div>

@code {

    private bool Started { get; set; }
    private Session Session { get; set; }

    [Parameter]
    public string ProcessId { get; set; }

    [Parameter]
    public string ProfilerId { get; set; }

    public Profiler _profiler;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _profiler = _profilerDiscovery.GetProfilers().Where(x => x.ProfilerId.ToString() == ProfilerId).First();
    }

    private async Task OnRunAnalysisClicked(object data)
    {
        Started = true;

        try
        {
            _logger.LogInformation("Start profiling!");
            var sessionId = _profiler.StartProfilingSession(int.Parse(ProcessId), _logger);
            _logger.LogInformation("Successfully attached to process!");
            Session = await _sessionDiscovery.AwaitUntilCompletion(sessionId);
        }
        catch (Exception e)
        {
            _logger.LogError(e, "Could not attach to process {ProcessId}", ProcessId);
        }

        Started = false;
    }

    public void OnViewSessionResultsClicked(object data)
    {
        _navigationManager.NavigateTo($"/sessions/{Session.SessionId}", true);
    }

    public void OnBackClick(object data)
    {
        _navigationManager.NavigateTo($"/profilers/{ProcessId}", true);
    }

    private void LogProcessModulesInfo()
    {
        var process = System.Diagnostics.Process.GetProcessById(int.Parse(ProcessId));

        _logger.LogInformation($"--- start listing process modules ---");
        foreach (System.Diagnostics.ProcessModule module in process.Modules)
        {
            _logger.LogInformation($" - Module: '{module.FileName}', Name: '{module.ModuleName}', Address: '{module.BaseAddress}'");
        }
        _logger.LogInformation($"---  end listing process modules  ---");
    }

    private void ManualLoadUnload()
    {
        Segfault.LoadUnload(_logger, Profiler.GetTmpProfilerLibrary());
    }
} 