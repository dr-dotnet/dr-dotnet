@page "/processes"

@inject IProcessDiscovery ProcessDiscovery
@inject NavigationManager NavigationManager

<MudIconButton Style="float: left;" OnClick="@OnBackClick"/>

<h3 class="mat-h3">Dotnet Processes</h3>

<MudTable Items="@_processes" class="mat-elevation-z5" AllowSelection="true" OnRowClick="OnSelectionChanged" T="ProcessInfo" PageSize="Int32.MaxValue" ShowPaging="false">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Managed Assembly Name</MudTh>
        <MudTh>Runtime Version</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Id</MudTd>
        <MudTd>@context.ManagedAssemblyName</MudTd>
        <MudTd>@context.Version</MudTd>
    </RowTemplate>
</MudTable>

@code {
    private IList<ProcessInfo> _processes = Array.Empty<ProcessInfo>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ScanProcesses();
    }

    private void ScanProcesses()
    {
        _processes = ProcessDiscovery.GetDotnetProcesses(OnProgress);

        StateHasChanged();
    }

    private float Progress { get; set; }

    private void OnProgress(float progress)
    {
        Progress = progress;
        InvokeAsync(StateHasChanged);
    }

    private void OnSelectionChanged(TableRowClickEventArgs<ProcessInfo> tableRowClickEventArgs)
    {
        NavigationManager.NavigateTo($"/profilers/{tableRowClickEventArgs.Item.Id}", true);
    }

    private void OnBackClick(object data)
    {
        NavigationManager.NavigateTo("/", true);
    }
} 