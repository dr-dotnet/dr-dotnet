@using DrDotnet.Utils
@namespace DrDotnet

@inject IJSRuntime JSRuntime

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="App Logs">
        <textarea id="@Id" class="logs" style="height: 70vh; width: 85vw;">@ChildContent</textarea>
    </MudTabPanel>
    <MudTabPanel Text="Tab Two">
        <textarea id="@Id" class="logs" style="height: 70vh; width: 85vw;">@ChildContent</textarea>
    </MudTabPanel>
</MudTabs>

@code {
    [Parameter]
    public EventCallback OnAfterRendered { get; set; }
    
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    
    [Parameter]  
    public string? Id { get; set; }
    
    [Inject(Key = "app.log")]
    public FileContentWatcher? AppLogWatcher { get; set; }

    protected override void OnInitialized()
    {
        Console.WriteLine("OnInitialized");

        AppLogWatcher!.ContentWritten += OnContentWritten;
        
        // In case Id is not set, set a random one
        Id ??= Random.Shared.Next().ToString();
        base.OnInitialized();
    }
    
    private void OnContentWritten(string content)
    {
        Console.WriteLine("OnContentWritten");
        Console.WriteLine(content);
    }
   
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await OnAfterRendered.InvokeAsync(Id);
            //await JSRuntime.InvokeVoidAsync("scrollToBottom", Id);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        //await JSRuntime.InvokeVoidAsync("scrollToBottom", Id);
    }
    
    public void Dispose()
    {
        AppLogWatcher!.ContentWritten -= OnContentWritten;
    }
}