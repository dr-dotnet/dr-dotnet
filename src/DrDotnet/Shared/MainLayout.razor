@using DrDotnet.Utils
@using System.IO

@implements IDisposable
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudText Typo="Typo.h5" Class="ml-3">Application</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

<MudButton @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
    Open Simple Dialog
</MudButton>

@* <div class="page"> *@
@*     <div class="main"> *@
@*         <div class="top-row px-4"> *@
@*             <img @onclick="NavigateToRoot" src="_content/DrDotnet/logo.png" width="36" height="36" style="margin-right: 10px; cursor: pointer;"/> *@
@*             <b style="flex-grow: 1;">Dr.Dotnet</b> *@
@*             <i>Version @VersionUtils.CurrentVersion</i> *@
@*             <MudButton OnClick="@OpenLogs" Icon="receipt" Style="">Logs</MudButton> *@
@*             <MudButton Link="https://github.com/ogxd/dr-dotnet" Icon="open_in_new" Style="">See on Github</MudButton> *@
@*         </div> *@
@*         <div class="content px-4"> *@
@*             @Body *@
@*         </div> *@
@*     </div> *@
@* </div> *@

@* <MudButton @bind-IsOpen="@IsLogDialogOpen"> *@
@*     <DialogContent> *@
@*         <MatTabGroup> *@
@*             <MatTab Label="App Logs"> *@
@*                 <LogsArea>@AppLogs</LogsArea> *@
@*             </MatTab> *@
@*             <MatTab Label="Profiler Logs"> *@
@*                 <LogsArea>@ProfilerLogs</LogsArea> *@
@*             </MatTab> *@
@*         </MatTabGroup> *@
@*     </DialogContent> *@
@*     <DialogActions> *@
@*         <MudButton OnClick="@(e => { IsLogDialogOpen = false; })">Close</MudButton> *@
@*     </DialogActions> *@
@* </MudButton> *@
 
@code
{
    private const int MaximumBufferSize = 65536;
    private readonly FileSystemWatcher _watcher = new(PathUtils.DrDotnetBaseDirectory);

    private bool IsLogDialogOpen { get; set; }

    private string? _appLogs;
    public string AppLogs => _appLogs ??= GetLogs("app.log");
    
    private string? _profilerLogs;
    public string ProfilerLogs => _profilerLogs ??= GetLogs("profiler.log");

    void OpenLogs()
    {
        IsLogDialogOpen = true;
    }
    
    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<LogsArea>("Simple Dialog", options);
    }

    private static string GetLogs(string file)
    {
        string fullPath = Path.Combine(PathUtils.DrDotnetBaseDirectory, file);
        if (!File.Exists(fullPath))
        {
            return string.Empty;
        }

        using var fs = File.Open(fullPath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
        using var sr =  new StreamReader(fs);

        if (fs.Length > MaximumBufferSize)
        {
            fs.Seek(-MaximumBufferSize, SeekOrigin.End);
        }
        
        return sr.ReadToEnd();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _watcher.NotifyFilter = NotifyFilters.LastAccess
                              | NotifyFilters.CreationTime
                              | NotifyFilters.LastWrite
                              | NotifyFilters.Size;

        _watcher.Changed += WatcherOnChanged;

        _watcher.Filter = "*.log";
        _watcher.IncludeSubdirectories = false;
        _watcher.EnableRaisingEvents = true;
    }
    
    private void NavigateToRoot()
    {
        // Navigate to the root page
        NavigationManager.NavigateTo("/", true); // 'true' forces page reload if you're already on the root
    }

    private void WatcherOnChanged(object sender, FileSystemEventArgs e)
    {
        // Reset content
        _appLogs = null;
        _profilerLogs = null;
        
        if (IsLogDialogOpen)
        {
            // Trigger refresh of the logs view in case dialog is open and new log arrives
            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        _watcher.Dispose();
    }
}