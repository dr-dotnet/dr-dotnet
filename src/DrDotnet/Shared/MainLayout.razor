@using DrDotnet.Utils
@using System.IO

@inherits LayoutComponentBase

@inject IJSRuntime JSRuntime

<div class="page">
    <div class="main">
        <div class="top-row px-4">
            <b style="flex-grow: 1;">Dr.Dotnet</b>
            <i>Version @VersionUtils.CurrentVersion</i>
            <MatButton OnClick="@OpenLogs" Icon="receipt" Style="">Logs</MatButton>
            <MatButton Link="https://github.com/ogxd/dr-dotnet" Icon="open_in_new" Style="">See on Github</MatButton>
        </div>
        <div class="content px-4">
            @Body
        </div>
    </div>
</div>

<MatDialog @bind-IsOpen="@IsLogDialogOpen">
    <MatDialogContent>
        <MatTabGroup>
            <MatTab Label="App Logs">
                <textarea @bind="AppLogs" @bind:event="oninput" class="logs" style="height: 70vh; width: 85vw;"></textarea>
            </MatTab>
            <MatTab Label="Profiler Logs">
                @* <textarea readonly @ref="profilerLogsTextArea" class="logs" style="height: 70vh; width: 85vw;">@GetLogs("profiler.debug.log")</textarea> *@
            </MatTab>
        </MatTabGroup>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { IsLogDialogOpen = false; })">Close</MatButton>
    </MatDialogActions>
</MatDialog>
 
@code
{
#pragma warning disable CS0649
    //private ElementReference appLogsTextArea;
    // private ElementReference profilerLogsTextArea;
#pragma warning restore CS0649
    
    private const int MaximumBufferSize = 65536;
    private readonly FileSystemWatcher _watcher = new(PathUtils.DrDotnetBaseDirectory);

    private bool IsLogDialogOpen { get; set; }

    public string AppLogs
    {
        get => GetLogs("app.debug.log");
        set { }
    }

    void OpenLogs()
    {
        IsLogDialogOpen = true;
    }

    private string GetLogs(string file)
    {
        string fullPath = Path.Combine(PathUtils.DrDotnetBaseDirectory, file);
        if (!File.Exists(fullPath))
        {
            return string.Empty;
        }
        
        using var fs = File.OpenRead(fullPath);
        using var sr =  new StreamReader(fs);

        if (fs.Length > MaximumBufferSize)
        {
            fs.Seek(-MaximumBufferSize, SeekOrigin.End);
        }
        
        Console.WriteLine("GetLogs");
        
        return sr.ReadToEnd();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        //AppLogs = GetLogs("app.debug.log");
        
        _watcher.NotifyFilter = NotifyFilters.LastAccess
                              | NotifyFilters.LastWrite
                              | NotifyFilters.Size;

        _watcher.Changed += WatcherOnChanged;

        _watcher.Filter = "*.log";
        _watcher.IncludeSubdirectories = true;
        _watcher.EnableRaisingEvents = true;
        
        Console.WriteLine("OnInitialized");
    }

    private void WatcherOnChanged(object sender, FileSystemEventArgs e)
    {
        if (IsLogDialogOpen)
        {
            // Trigger refresh of the logs view in case dialog is open and new log arrives
            InvokeAsync(StateHasChanged);
            
            Console.WriteLine("WatcherOnChanged");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync 1");
        
        await base.OnInitializedAsync();
        
        Console.WriteLine("OnInitializedAsync 2");
        
        //await JSRuntime.InvokeVoidAsync("scroll");
    }
}